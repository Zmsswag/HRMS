# Generated by Django 5.1.7 on 2025-04-01 09:23

from django.db import migrations
from django.contrib.auth.hashers import make_password
from django.utils import timezone


def create_default_admin(apps, schema_editor):
    """创建默认管理员账户和相关数据"""
    # 获取模型类
    EmployeeProfile = apps.get_model('myapp', 'EmployeeProfile')
    UserAccount = apps.get_model('myapp', 'UserAccount')
    Department = apps.get_model('myapp', 'Department')
    Position = apps.get_model('myapp', 'Position')
    EmployeeDepartment = apps.get_model('myapp', 'EmployeeDepartment')
    Salary = apps.get_model('myapp', 'Salary')
    
    # 创建管理部门
    admin_dept, _ = Department.objects.get_or_create(
        name='公司董事会'
    )
    
    # 创建管理员职位
    admin_position, _ = Position.objects.get_or_create(
        department=admin_dept,
        title='CEO'
    )
    
    # 创建管理员员工档案
    admin_employee, _ = EmployeeProfile.objects.get_or_create(
        name='蔡福临',
        id_number='0',  # 使用特殊ID号标识系统管理员
        age=22,
        current_hire_date="2025-1-1",
        is_employed=True
        
    )
    
    # 创建管理员账户
    admin_account, _ = UserAccount.objects.get_or_create(
        employee=admin_employee,
        account='cfl5079',
        defaults={'password': make_password('294031')}  # 默认密码
    )
    
    # 关联管理员与部门职位
    EmployeeDepartment.objects.get_or_create(
        employee=admin_employee,
        department=admin_dept,
        position=admin_position
    )
    
    Salary.objects.get_or_create(
        employee=admin_employee,
        amount=1000000,
        date="2025-3-1"
    )
    
    print("默认管理员账户创建成功！账号: cfl5079, 密码: 294031")


def remove_default_admin(apps, schema_editor):
    """回滚操作：删除默认管理员账户"""
    EmployeeProfile = apps.get_model('myapp', 'EmployeeProfile')
    
    try:
        admin = EmployeeProfile.objects.get(id_number='000000000000000000')
        admin.delete()
        print("默认管理员账户已删除")
    except EmployeeProfile.DoesNotExist:
        pass

def create_default_employee(apps, schema_editor):
    """创建默认员工账户和相关数据"""
    # 获取模型类
    EmployeeProfile = apps.get_model('myapp', 'EmployeeProfile')
    UserAcount =apps.get_model('myapp', 'UserAccount')
    Department = apps.get_model('myapp', 'Department')
    Position = apps.get_model('myapp', 'Position')
    EmployeeDepartment = apps.get_model('myapp', 'EmployeeDepartment')
    Salary = apps.get_model('myapp', 'Salary')
    # 创建默认部门
    default_dept, _ = Department.objects.get_or_create(
        name='人力资源部'
    )
    # 创建默认职位
    default_position, _ = Position.objects.get_or_create(
        department=default_dept,
        title='hr'
    )
    
    default_employee,_= EmployeeProfile.objects.get_or_create(
        name='默认hr',
        id_number='1',
        age=30, 
        current_hire_date="2025-1-1"
    )
    default_account, _ = UserAcount.objects.get_or_create(
        employee=default_employee,
        account='1',
        defaults={'password': make_password('1')}
    )
    
    default_employee_department, _ = EmployeeDepartment.objects.get_or_create(
        employee=default_employee,
        department=default_dept,
        position=default_position
    )
    Salary.objects.get_or_create(
        employee=default_employee,
        amount=5000,
        date="2025-3-1"
    )
    print("默认员工账户创建成功！账号: 1, 密码: 1")
    
    
def remove_default_employee(apps, schema_editor):
    """回滚操作：删除默认员工账户"""
    EmployeeProfile = apps.get_model('myapp', 'EmployeeProfile')

    try:
        default_employee = EmployeeProfile.objects.get(id_number='1')
        default_employee.delete()
        print("默认员工账户已删除")
    except EmployeeProfile.DoesNotExist:
        pass
def create_default(apps, schema_editor):
    # create_default_admin(apps, schema_editor)
    # create_default_employee(apps, schema_editor)
    return

def remove_default(apps, schema_editor):
    # remove_default_admin(apps, schema_editor)
    # remove_default_employee(apps, schema_editor)
    return
    
class Migration(migrations.Migration):

    dependencies = [
        ('myapp', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_default, remove_default),
    ]
